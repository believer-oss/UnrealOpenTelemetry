// Copyright Epic Games, Inc. All Rights Reserved.

using UnrealBuildTool;
using System.IO;

public class libotel : ModuleRules
{
	public libotel(ReadOnlyTargetRules Target) : base(Target)
	{
		Type = ModuleType.External;

		string OtelLibPath = Path.Combine(ModuleDirectory, "1.16.1/");
		PublicSystemIncludePaths.Add(Path.Combine(OtelLibPath, "include"));

		string LibPath = Path.Combine(OtelLibPath, "lib", Target.Platform.ToString(), "Release");

		if (Target.Platform == UnrealTargetPlatform.Win64)
		{
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "opentelemetry_common.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "opentelemetry_exporter_in_memory.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "opentelemetry_exporter_ostream_logs.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "opentelemetry_exporter_ostream_metrics.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "opentelemetry_exporter_ostream_span.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "opentelemetry_exporter_otlp_grpc.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "opentelemetry_exporter_otlp_grpc_client.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "opentelemetry_exporter_otlp_grpc_log.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "opentelemetry_exporter_otlp_grpc_metrics.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "opentelemetry_logs.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "opentelemetry_metrics.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "opentelemetry_otlp_recordable.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "opentelemetry_proto.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "opentelemetry_proto_grpc.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "opentelemetry_resources.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "opentelemetry_trace.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "opentelemetry_version.lib"));

			// dependencies
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "absl_bad_any_cast_impl.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "absl_bad_optional_access.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "absl_bad_variant_access.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "absl_base.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "absl_city.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "absl_civil_time.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "absl_cord.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "absl_cord_internal.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "absl_cordz_functions.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "absl_cordz_handle.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "absl_cordz_info.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "absl_cordz_sample_token.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "absl_crc32c.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "absl_crc_cord_state.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "absl_crc_cpu_detect.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "absl_crc_internal.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "absl_debugging_internal.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "absl_demangle_internal.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "absl_die_if_null.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "absl_examine_stack.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "absl_exponential_biased.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "absl_failure_signal_handler.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "absl_flags_commandlineflag.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "absl_flags_commandlineflag_internal.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "absl_flags_config.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "absl_flags_internal.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "absl_flags_marshalling.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "absl_flags_parse.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "absl_flags_private_handle_accessor.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "absl_flags_program_name.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "absl_flags_reflection.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "absl_flags_usage.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "absl_flags_usage_internal.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "absl_graphcycles_internal.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "absl_hash.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "absl_hashtablez_sampler.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "absl_int128.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "absl_kernel_timeout_internal.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "absl_leak_check.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "absl_log_entry.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "absl_log_flags.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "absl_log_globals.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "absl_log_initialize.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "absl_log_internal_check_op.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "absl_log_internal_conditions.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "absl_log_internal_fnmatch.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "absl_log_internal_format.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "absl_log_internal_globals.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "absl_log_internal_log_sink_set.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "absl_log_internal_message.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "absl_log_internal_nullguard.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "absl_log_internal_proto.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "absl_log_severity.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "absl_log_sink.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "absl_low_level_hash.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "absl_malloc_internal.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "absl_periodic_sampler.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "absl_random_distributions.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "absl_random_internal_distribution_test_util.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "absl_random_internal_platform.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "absl_random_internal_pool_urbg.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "absl_random_internal_randen.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "absl_random_internal_randen_hwaes.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "absl_random_internal_randen_hwaes_impl.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "absl_random_internal_randen_slow.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "absl_random_internal_seed_material.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "absl_random_seed_gen_exception.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "absl_random_seed_sequences.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "absl_raw_hash_set.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "absl_raw_logging_internal.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "absl_scoped_set_env.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "absl_spinlock_wait.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "absl_stacktrace.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "absl_status.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "absl_statusor.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "absl_str_format_internal.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "absl_strerror.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "absl_string_view.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "absl_strings.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "absl_strings_internal.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "absl_symbolize.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "absl_synchronization.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "absl_throw_delegate.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "absl_time.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "absl_time_zone.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "absl_vlog_config_internal.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "address_sorting.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "cares.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "gpr.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "grpc++.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "grpc++_alts.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "grpc++_error_details.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "grpc++_reflection.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "grpc++_unsecure.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "grpc.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "grpc_authorization_provider.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "grpc_plugin_support.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "grpc_unsecure.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "grpcpp_channelz.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libprotobuf-lite.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libprotobuf.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libprotoc.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "re2.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "upb_base_lib.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "upb_json_lib.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "upb_mem_lib.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "upb_message_lib.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "upb_textformat_lib.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "utf8_range.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "utf8_range_lib.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "utf8_validity.lib"));
			
			PublicAdditionalLibraries.Add(Path.Combine(Target.UEThirdPartySourceDirectory, "zlib/1.3/lib/Win64/Release/zlibstatic.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(Target.UEThirdPartySourceDirectory, "OpenSSL/1.1.1t/lib/Win64/VS2015/Release/libssl.lib"));
			PublicAdditionalLibraries.Add(Path.Combine(Target.UEThirdPartySourceDirectory, "OpenSSL/1.1.1t/lib/Win64/VS2015/Release/libcrypto.lib"));
		}
		else if (Target.Platform == UnrealTargetPlatform.Linux)
		{
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libopentelemetry_common.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libopentelemetry_exporter_in_memory.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libopentelemetry_exporter_ostream_logs.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libopentelemetry_exporter_ostream_metrics.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libopentelemetry_exporter_ostream_span.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libopentelemetry_exporter_otlp_grpc.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libopentelemetry_exporter_otlp_grpc_client.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libopentelemetry_exporter_otlp_grpc_log.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libopentelemetry_exporter_otlp_grpc_metrics.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libopentelemetry_exporter_otlp_http.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libopentelemetry_exporter_otlp_http_client.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libopentelemetry_exporter_otlp_http_log.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libopentelemetry_exporter_otlp_http_metric.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libopentelemetry_http_client_curl.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libopentelemetry_logs.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libopentelemetry_metrics.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libopentelemetry_otlp_recordable.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libopentelemetry_proto.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libopentelemetry_proto_grpc.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libopentelemetry_resources.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libopentelemetry_trace.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libopentelemetry_version.a"));

			// dependencies
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libabsl_bad_any_cast_impl.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libabsl_bad_optional_access.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libabsl_bad_variant_access.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libabsl_base.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libabsl_city.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libabsl_civil_time.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libabsl_cord.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libabsl_cord_internal.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libabsl_cordz_functions.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libabsl_cordz_handle.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libabsl_cordz_info.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libabsl_cordz_sample_token.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libabsl_crc32c.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libabsl_crc_cord_state.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libabsl_crc_cpu_detect.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libabsl_crc_internal.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libabsl_debugging_internal.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libabsl_demangle_internal.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libabsl_die_if_null.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libabsl_examine_stack.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libabsl_exponential_biased.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libabsl_failure_signal_handler.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libabsl_flags_commandlineflag.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libabsl_flags_commandlineflag_internal.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libabsl_flags_config.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libabsl_flags_internal.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libabsl_flags_marshalling.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libabsl_flags_parse.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libabsl_flags_private_handle_accessor.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libabsl_flags_program_name.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libabsl_flags_reflection.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libabsl_flags_usage.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libabsl_flags_usage_internal.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libabsl_graphcycles_internal.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libabsl_hash.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libabsl_hashtablez_sampler.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libabsl_int128.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libabsl_kernel_timeout_internal.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libabsl_leak_check.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libabsl_log_entry.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libabsl_log_flags.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libabsl_log_globals.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libabsl_log_initialize.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libabsl_log_internal_check_op.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libabsl_log_internal_conditions.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libabsl_log_internal_fnmatch.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libabsl_log_internal_format.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libabsl_log_internal_globals.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libabsl_log_internal_log_sink_set.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libabsl_log_internal_message.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libabsl_log_internal_nullguard.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libabsl_log_internal_proto.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libabsl_log_severity.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libabsl_log_sink.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libabsl_low_level_hash.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libabsl_malloc_internal.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libabsl_periodic_sampler.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libabsl_random_distributions.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libabsl_random_internal_distribution_test_util.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libabsl_random_internal_platform.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libabsl_random_internal_pool_urbg.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libabsl_random_internal_randen.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libabsl_random_internal_randen_hwaes.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libabsl_random_internal_randen_hwaes_impl.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libabsl_random_internal_randen_slow.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libabsl_random_internal_seed_material.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libabsl_random_seed_gen_exception.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libabsl_random_seed_sequences.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libabsl_raw_hash_set.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libabsl_raw_logging_internal.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libabsl_scoped_set_env.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libabsl_spinlock_wait.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libabsl_stacktrace.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libabsl_status.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libabsl_statusor.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libabsl_str_format_internal.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libabsl_strerror.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libabsl_string_view.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libabsl_strings.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libabsl_strings_internal.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libabsl_symbolize.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libabsl_synchronization.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libabsl_throw_delegate.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libabsl_time.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libabsl_time_zone.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libabsl_vlog_config_internal.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libaddress_sorting.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libcares.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libgpr.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libgrpc++.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libgrpc++_alts.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libgrpc++_error_details.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libgrpc++_reflection.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libgrpc++_unsecure.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libgrpc.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libgrpc_authorization_provider.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libgrpc_plugin_support.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libgrpc_unsecure.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libgrpcpp_channelz.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libprotobuf-lite.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libprotobuf.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libprotoc.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libre2.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libupb_base_lib.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libupb_json_lib.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libupb_mem_lib.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libupb_message_lib.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libupb_textformat_lib.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libutf8_range.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libutf8_range_lib.a"));
			PublicAdditionalLibraries.Add(Path.Combine(LibPath, "libutf8_validity.a"));

			PublicAdditionalLibraries.Add(Path.Combine(Target.UEThirdPartySourceDirectory, "zlib/1.3/lib/Unix/x86_64-unknown-linux-gnu/Release/libz.a"));
			PublicAdditionalLibraries.Add(Path.Combine(Target.UEThirdPartySourceDirectory, "OpenSSL/1.1.1t/lib/Unix/x86_64-unknown-linux-gnu/libssl.a"));
			PublicAdditionalLibraries.Add(Path.Combine(Target.UEThirdPartySourceDirectory, "OpenSSL/1.1.1t/lib/Unix/x86_64-unknown-linux-gnu/libcrypto.a"));
		}
	}
}
